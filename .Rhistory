} else {#Survival Outcome
feasible.enrollment.period <- osea.design.performance.evaluation <- NULL
enrollment.period.upper.bound <- min(ui.max.duration,
ui.max.size/ui.accrual.yearly.rate)
enrollment.period.lower.bound <- min.enrollment.period
feasible.max.duration <- ui.max.duration
#repeat{
#  osea.design.performance.evaluation <- triage.based.on.outcome.type(outcome.type='survival',
#                                                        enrollment.period=enrollment.period.upper.bound,
#                                                        n.arms=n.arms,
#                                                        accrual.rate=ui.accrual.yearly.rate,
#                                                        subpopulation.sizes=ui.subpopulation.sizes,
#                                                        non.inferiority=ifelse(ui.time.to.event.trial.type=="non-inferiority",TRUE,FALSE),
#                                                        hazard.rate=ui.hazard.rate,
#                                                        time=max(ui.max.duration,enrollment.period.upper.bound),
#                                                        max.follow=Inf,
#                                                        censoring.rate=ui.time.to.event.censoring.rate,
#                                                        ni.margin=ui.time.to.event.non.inferiority.trial.margin,
#                                                        restrict.enrollment=FALSE,
#                                                        mcid=ui.mcid,
#                                                        futility.boundaries=NULL,
#                                                        relative.efficiency=ui.relative.efficiency,
#                                                         n.simulations=simulated.annealing.parameter.n.simulations,
#                                                        alpha.allocation=
#                                                          rep(1/number.of.alpha.allocation.components,
#                                                              number.of.alpha.allocation.components),
#                                                        total.alpha=ui.total.alpha)
#  discrepancy.between.desired.power.empirical.power <- max(ui.desired.power-cbind(osea.design.performance.evaluation$empirical.power,osea.design.performance.evaluation$conj.power),na.rm=TRUE)
#  feasibility.indicator <- ifelse(is.na(discrepancy.between.desired.power.empirical.power),TRUE,
#                                  discrepancy.between.desired.power.empirical.power<=0)
#  if(feasibility.indicator){
#    break
#  }
#  enrollment.period.upper.bound <- 2*enrollment.period.upper.bound
#}
while(enrollment.period.upper.bound-enrollment.period.lower.bound>0.01){
candidate.enrollment.period <- mean(c(enrollment.period.lower.bound,enrollment.period.upper.bound))
osea.design.performance.evaluation <- triage.based.on.outcome.type(outcome.type='survival',
enrollment.period=candidate.enrollment.period,
n.arms=n.arms,
accrual.rate=ui.accrual.yearly.rate,
subpopulation.sizes=ui.subpopulation.sizes,
non.inferiority=ifelse(ui.time.to.event.trial.type=="non-inferiority",TRUE,FALSE),
hazard.rate=ui.hazard.rate,
time=max(ui.max.duration,candidate.enrollment.period),
max.follow=Inf,
censoring.rate=ui.time.to.event.censoring.rate,
ni.margin=ui.time.to.event.non.inferiority.trial.margin,
restrict.enrollment=FALSE,
mcid=ui.mcid,
futility.boundaries=NULL,
relative.efficiency=ui.relative.efficiency,
n.simulations=simulated.annealing.parameter.n.simulations,
alpha.allocation=
rep(1/number.of.alpha.allocation.components,
number.of.alpha.allocation.components),
total.alpha=ui.total.alpha,
construct.joint.distribution.of.test.statistics=construct.joint.distribution.of.test.statistics,
generate.efficacy.boundaries=generate.efficacy.boundaries,
design.evaluate=design.evaluate)
discrepancy.between.desired.power.empirical.power <- max(ui.desired.power-cbind(osea.design.performance.evaluation$empirical.power,osea.design.performance.evaluation$conj.power),na.rm=TRUE)
feasibility.indicator <- ifelse(is.na(discrepancy.between.desired.power.empirical.power),TRUE,
discrepancy.between.desired.power.empirical.power<=0)
if(feasibility.indicator){#Current sample size is feasible; store current results and explore smaller sample sizes
#osea.result <- osea.design.performance.evaluation;
feasible.enrollment.period <- candidate.enrollment.period;
feasible.max.duration <- max(ui.max.duration,feasible.enrollment.period)
enrollment.period.upper.bound <- candidate.enrollment.period} else{
#Current sample size is infeasible; explore larger sample sizes
enrollment.period.lower.bound <- candidate.enrollment.period
}
}
if(is.null(feasible.enrollment.period)){feasible.enrollment.period <- min(ui.max.duration,
ui.max.size/ui.accrual.yearly.rate)} #if no feasible solution, use maximum duration
#Placeholder to force output into format expected by .Rnw file for report building
osea.result <-
sa.optimize(search.parameters=
list(enrollment.period=feasible.enrollment.period),
search.transforms=
list(enrollment.period=function(x){feasible.enrollment.period}),
fixed.parameters=list(n.arms=n.arms,
accrual.rate=ui.accrual.yearly.rate,
subpopulation.sizes=ui.subpopulation.sizes,
outcome.type='survival',
non.inferiority=ifelse(ui.time.to.event.trial.type=="non-inferiority",TRUE,FALSE),
hazard.rate=ui.hazard.rate,
time=max(feasible.enrollment.period,ui.max.duration),
max.follow=Inf,
censoring.rate=ui.time.to.event.censoring.rate,
ni.margin=ui.time.to.event.non.inferiority.trial.margin,
restrict.enrollment=FALSE,
mcid=ui.mcid,
futility.boundaries=NULL,
relative.efficiency=ui.relative.efficiency,
n.simulations=simulated.annealing.parameter.n.simulations,
alpha.allocation=
rep(1/number.of.alpha.allocation.components,
number.of.alpha.allocation.components),
total.alpha=ui.total.alpha,
construct.joint.distribution.of.test.statistics=construct.joint.distribution.of.test.statistics,
generate.efficacy.boundaries=generate.efficacy.boundaries,
design.evaluate=design.evaluate),
create.object=triage.based.on.outcome.type,
evaluate.object=power.penalized.weighted,
function.scale=simulated.annealing.parameter.function.scale,
parameter.scale=simulated.annealing.parameter.period.scale,
max.iterations=2,
temperature=simulated.annealing.parameter.survival.temperature,
evals.per.temp=simulated.annealing.parameter.evals.per.temp,
report.iteration=simulated.annealing.parameter.report.iteration,
scenario.weights=ui.scenario.weights,
power.penalty=simulated.annealing.parameter.power.penalty,
power.constraints=ui.desired.power,
optimization.target=ui.optimization.target)
}
n.arms
n.subgroups
null.hypotheses
empirical.power
names(design.performance.continuous.or.binary.outcome.type)
names(empirical.power)
null.hypotheses
colnames(decisions.stages)
subgroup.col
null.hypotheses
null.hypotheses
null.hypotheses
View(potential.trials)
View(empirical.power)
View(disj.power.n.subgroups)
View(decisions.stages)
View(ui.outcome.mean)
View(ui.population.parameters)
### Streamlined Design Optimization Pipeline ##########
# Authors: Josh Betz (jbetz@jhu.edu) and Michael Rosenblum
library(knitr)
library(mvtnorm)
library(plyr)
### Fixed Parameters ###########################################################
min.n.per.arm <- 25       # For Continuous/Binary Outcomes
min.enrollment.period <- 0.5    # For Survival Outcomes
simulated.annealing.parameter.function.scale <- 1
simulated.annealing.parameter.n.scale <- 100
simulated.annealing.parameter.period.scale <- 2
simulated.annealing.parameter.max.iterations <- 1000
# simulated.annealing.parameter.max.iterations <- 5e4 # Use for production
simulated.annealing.parameter.n.simulations <- 1e4
simulated.annealing.parameter.means.temperature <- 100
simulated.annealing.parameter.survival.temperature <- 10
simulated.annealing.parameter.evals.per.temp <- 10
simulated.annealing.parameter.report.iteration <- 1
simulated.annealing.parameter.power.penalty <- 100000
simulated.annealing.parameter.boundary.to.enroll <- 1
#for local testing only:
#code.dir <- "."
#optimizer.file <- "design_optimizer.R"
#performance.file <- "ComputePerformanceMetrics.R"
#binsearch.file <- "Utility_BinarySearch.R"
#OneTreatmentArm.file <- "DesignClass2Subpopulations1TreatmentVsControl.R"
#TwoTreatmentArms.file <- "DesignClass2Subpopulations2TreatmentVsControl.R"
# Read in bash arguments from command line - extract parameters
bash.args <- commandArgs(trailingOnly=TRUE)
if(length(bash.args)>0) {
for(i in 1:length(bash.args)) eval(parse(text=bash.args[i]))
}
data.dir <- "../"
code.dir <- "."
optimizer.file <- "design_optimizer.R"
performance.file <- "ComputePerformanceMetrics.R"
binsearch.file <- "Utility_BinarySearch.R"
OneTreatmentArm.file <- "DesignClass2Subpopulations1TreatmentVsControl.R"
TwoTreatmentArms.file <- "DesignClass2Subpopulations2TreatmentVsControl.R"
GroupSequentialOneTreatmentArm.file <- "DesignClassGroupSequential2Subpopulations1TreatmentVsControl.R"
# Read in optimizer code
source(file.path(code.dir, optimizer.file))
source(file.path(code.dir, binsearch.file))
source(file.path(code.dir, performance.file))
source(file.path(code.dir, OneTreatmentArm.file))
source(file.path(code.dir, TwoTreatmentArms.file))
source(file.path(code.dir, GroupSequentialOneTreatmentArm.file))
# Load parameters from user interface
#load(file.path(data.dir, "parameters", "ui.parameters.rda"))
#load("michael_06142019_1227.rda")
# Load parameters from user interface
#load(file.path(data.dir, "parameters", "ui.parameters.rda"))
# TWO ARM EXAMPLES
# Continuous Example
load("michael_09252017_1335.rda"); ui.n.arms <- 2;
# Binary Example
#load("michael_09252017_1508.rda"); ui.n.arms <- 2;
# Survival Example
# load("michael_09252017_1551.rda")
# THREE ARM EXAMPLES
# Continuous Example
#load("michael_09252017_2052.rda")
# Binary Example
#load("michael_09252017_2100.rda")
# Survival Example
#load("michael_09252017_2112.rda")
# Get start time
isa.start.time <- proc.time()
### NOTE: restricted to two subpopulations ###
n.subpopulations <- 2
n.arms <- ui.n.arms
if(n.arms==3){simulated.annealing.parameter.max.iterations <- 2} # Since 3 arm designs require substantially more computation time
ui.subpopulation.sizes <- c(ui.subpopulation.1.size, 1-ui.subpopulation.1.size)
# If random seed is supplied, specify seeds. Otherwise pseudorandom seeds
# are chosen based on the initial RNG state.
if(!exists("initial.seed")){
initial.seed <- sample(x=1:1e8, size=1)
}
# Set random seed
set.seed(initial.seed)
# Source design.evaluation code corresponding to number of arms in trial
if(n.arms==2){
# Computes distribution of test statistics in a given scenario,
# using canonical joint distribution
construct.joint.distribution.of.test.statistics <-
function(...){
construct.joint.distribution.of.test.statistics.OneTreatmentArm(...)
}
# Computes efficacy stopping boundaries
generate.efficacy.boundaries <-
function(...){
get.eff.bound.OneTreatmentArm(...)
}
# Evaluates performance of simulated trials
design.evaluate <-
function(...){
design.evaluate.OneTreatmentArm(...)
}
} else if(n.arms==3){
# Computes distribution of test statistics in a given scenario,
# using canonical joint distribution
construct.joint.distribution.of.test.statistics <-
function(...){
construct.joint.distribution.of.test.statistics.TwoTreatmentArms(...)
}
# Computes efficacy stopping boundaries
generate.efficacy.boundaries <-
function(...){
get.eff.bound.TwoTreatmentArms(...)
}
# Evaluates performance of simulated trials
design.evaluate <-
function(...){
design.evaluate.TwoTreatmentArms(...)
}
}
# Set functions for computing design features and design evaluation
##
## Format User Inputs from Graphical User Interface
##
if(ui.type.of.outcome.data!="time-to-event"){ # Continuous and Binary Cases
if(n.arms==2){
if(ui.type.of.outcome.data=="binary") {
ui.outcome.mean <- subset(ui.population.parameters,select=c(2,4,1,3))
ui.outcome.sd <- sqrt(ui.outcome.mean*(1-ui.outcome.mean))
} else{
ui.outcome.mean <- cbind(array(0,c(nrow(ui.population.parameters),2)),subset(ui.population.parameters,select=c(1,2)))
ui.outcome.sd <- sqrt(subset(ui.population.parameters,select=c(4,6,3,5)))
}
} else if(n.arms==3){
if(ui.type.of.outcome.data=="binary") {
ui.outcome.mean <- ui.population.parameters
ui.outcome.sd <- sqrt(ui.outcome.mean*(1-ui.outcome.mean))
} else{
ui.outcome.mean <- subset(ui.population.parameters,select=c(1,3,5,7,9,11))
ui.outcome.sd <- sqrt(subset(ui.population.parameters,select=c(2,4,6,8,10,12)))
}
}
arm.names <- c(LETTERS[3], LETTERS[1:n.arms][-3])[1:n.arms]
colnames(ui.outcome.sd) <- colnames(ui.outcome.mean) <-
paste0(rep(arm.names, each=n.subpopulations),
rep(1:n.subpopulations, n.arms))
} else { # Survival Cases
ui.hazard.rate <- ui.population.parameters
if(ui.include.designs.start.subpop.1){
number.of.alpha.allocation.components <- number.of.alpha.allocation.components - (n.subpopulations-1)}
arm.names <- c(LETTERS[3], LETTERS[1:n.arms][-3])[1:n.arms]
colnames(ui.hazard.rate) <-
paste0(rep(arm.names, each=n.subpopulations),
rep(1:n.subpopulations, n.arms))
}
## Run optimizations, starting with 1 stage
n.stages <- 1 # Single Stage
number.of.alpha.allocation.components <- n.stages*n.subpopulations
if(ui.type.of.outcome.data!="time-to-event"){ # Continuous and Binary Cases
# if(ui.optimization.target=="ESS") {
#   Switch Objective Function and Parameters
# }
max.enrollment.period <- (ui.max.duration-ui.followup.length)
max.possible.accrual <- ui.accrual.yearly.rate*max.enrollment.period
#Binary search to minimize sample size over feasible designs
feasible.n.per.arm <- osea.result <- NULL
n.per.arm.upper.bound <- min(ui.max.size, max.possible.accrual)/n.arms
n.per.arm.lower.bound <- min.n.per.arm
#Increase upper bound if necessary to meet power requirements
#repeat{
#  osea.design.performance.evaluation <- triage.based.on.outcome.type(outcome.type=ui.type.of.outcome.data,
#                                                      n.per.arm=floor(n.per.arm.upper.bound),
#                                                      n.arms=n.arms,
#                                                      accrual.rate=ui.accrual.yearly.rate,
#                                                      delay=ui.followup.length,
#                                                      subpopulation.sizes=ui.subpopulation.sizes,
#                                                      interim.info.times=NULL,
#                                                      outcome.mean=ui.outcome.mean,
#                                                      outcome.sd=ui.outcome.sd,
#                                                      mcid=ui.mcid,
#                                                      futility.boundaries=NULL,
#                                                      relative.efficiency=ui.relative.efficiency,        #                                                      n.simulations=simulated.annealing.parameter.n.simulations,
#                                                      alpha.allocation=rep(1/number.of.alpha.allocation.components,
#                                                                           number.of.alpha.allocation.components),
#                                                      total.alpha=ui.total.alpha)
#  discrepancy.between.desired.power.empirical.power <- max(ui.desired.power-cbind(osea.design.performance.evaluation$empirical.power,osea.design.performance.evaluation$conj.power),na.rm=TRUE)
#  feasibility.indicator <- ifelse(is.na(discrepancy.between.desired.power.empirical.power),TRUE,
#                                  discrepancy.between.desired.power.empirical.power<=0)
#  if(feasibility.indicator){
#    break
#  }
#  n.per.arm.upper.bound <- 2*n.per.arm.upper.bound
#}
while(n.per.arm.upper.bound-n.per.arm.lower.bound>0.1){
candidate.n.per.arm <- mean(c(n.per.arm.lower.bound,n.per.arm.upper.bound))
osea.design.performance.evaluation <- triage.based.on.outcome.type(outcome.type=ui.type.of.outcome.data,
n.per.arm=floor(candidate.n.per.arm),
n.arms=n.arms,
accrual.rate=ui.accrual.yearly.rate,
delay=ui.followup.length,
subpopulation.sizes=ui.subpopulation.sizes,
interim.info.times=NULL,
outcome.mean=ui.outcome.mean,
outcome.sd=ui.outcome.sd,
mcid=ui.mcid,
futility.boundaries=NULL,
relative.efficiency=ui.relative.efficiency,
n.simulations=simulated.annealing.parameter.n.simulations,
alpha.allocation=rep(1/number.of.alpha.allocation.components,
number.of.alpha.allocation.components),
total.alpha=ui.total.alpha,
construct.joint.distribution.of.test.statistics=construct.joint.distribution.of.test.statistics,
generate.efficacy.boundaries=generate.efficacy.boundaries,
design.evaluate=design.evaluate)
discrepancy.between.desired.power.empirical.power <- max(ui.desired.power-cbind(osea.design.performance.evaluation$empirical.power,osea.design.performance.evaluation$conj.power),na.rm=TRUE)
feasibility.indicator <- ifelse(is.na(discrepancy.between.desired.power.empirical.power),TRUE,
discrepancy.between.desired.power.empirical.power<=0)
if(feasibility.indicator==TRUE){#Current sample size is feasible; store results and explore smaller sample sizes
#osea.result <- osea.design.performance.evaluation;
feasible.n.per.arm <- candidate.n.per.arm;
n.per.arm.upper.bound <- candidate.n.per.arm} else{ #Current sample size is infeasible; explore larger sample sizes
n.per.arm.lower.bound <- candidate.n.per.arm
}
}
if(is.null(feasible.n.per.arm)){feasible.n.per.arm <- min(ui.max.size, max.possible.accrual)/n.arms} #If none feasible, consider max allowed sample size
#Placeholder to force output into format expected by .Rnw file for report building
osea.result <-
sa.optimize(search.parameters=
list(n.per.arm=floor(feasible.n.per.arm)),
search.transforms=
# Cap sample size at minimum of the maximum specified size
# and the accrual rate x maximum allowable duration
list(n.per.arm=function(x){floor(feasible.n.per.arm)}),
fixed.parameters=list(n.arms=n.arms,
accrual.rate=ui.accrual.yearly.rate,
delay=ui.followup.length,
subpopulation.sizes=ui.subpopulation.sizes,
outcome.type=ui.type.of.outcome.data,
interim.info.times=NULL,
outcome.mean=ui.outcome.mean,
outcome.sd=ui.outcome.sd,
mcid=ui.mcid,
futility.boundaries=NULL,
relative.efficiency=ui.relative.efficiency,
n.simulations=simulated.annealing.parameter.n.simulations,
alpha.allocation=rep(1/number.of.alpha.allocation.components,
number.of.alpha.allocation.components),
total.alpha=ui.total.alpha,
construct.joint.distribution.of.test.statistics=construct.joint.distribution.of.test.statistics,
generate.efficacy.boundaries=generate.efficacy.boundaries,
design.evaluate=design.evaluate),
create.object=triage.based.on.outcome.type,
evaluate.object=power.penalized.weighted,
function.scale=simulated.annealing.parameter.function.scale,
parameter.scale=simulated.annealing.parameter.n.scale,
max.iterations=2,
temperature=simulated.annealing.parameter.means.temperature,
evals.per.temp=simulated.annealing.parameter.evals.per.temp,
report.iteration=simulated.annealing.parameter.report.iteration,
scenario.weights=ui.scenario.weights,
power.penalty=simulated.annealing.parameter.power.penalty,
power.constraints=ui.desired.power,
optimization.target=ui.optimization.target)
} else {#Survival Outcome
feasible.enrollment.period <- osea.design.performance.evaluation <- NULL
enrollment.period.upper.bound <- min(ui.max.duration,
ui.max.size/ui.accrual.yearly.rate)
enrollment.period.lower.bound <- min.enrollment.period
feasible.max.duration <- ui.max.duration
#repeat{
#  osea.design.performance.evaluation <- triage.based.on.outcome.type(outcome.type='survival',
#                                                        enrollment.period=enrollment.period.upper.bound,
#                                                        n.arms=n.arms,
#                                                        accrual.rate=ui.accrual.yearly.rate,
#                                                        subpopulation.sizes=ui.subpopulation.sizes,
#                                                        non.inferiority=ifelse(ui.time.to.event.trial.type=="non-inferiority",TRUE,FALSE),
#                                                        hazard.rate=ui.hazard.rate,
#                                                        time=max(ui.max.duration,enrollment.period.upper.bound),
#                                                        max.follow=Inf,
#                                                        censoring.rate=ui.time.to.event.censoring.rate,
#                                                        ni.margin=ui.time.to.event.non.inferiority.trial.margin,
#                                                        restrict.enrollment=FALSE,
#                                                        mcid=ui.mcid,
#                                                        futility.boundaries=NULL,
#                                                        relative.efficiency=ui.relative.efficiency,
#                                                         n.simulations=simulated.annealing.parameter.n.simulations,
#                                                        alpha.allocation=
#                                                          rep(1/number.of.alpha.allocation.components,
#                                                              number.of.alpha.allocation.components),
#                                                        total.alpha=ui.total.alpha)
#  discrepancy.between.desired.power.empirical.power <- max(ui.desired.power-cbind(osea.design.performance.evaluation$empirical.power,osea.design.performance.evaluation$conj.power),na.rm=TRUE)
#  feasibility.indicator <- ifelse(is.na(discrepancy.between.desired.power.empirical.power),TRUE,
#                                  discrepancy.between.desired.power.empirical.power<=0)
#  if(feasibility.indicator){
#    break
#  }
#  enrollment.period.upper.bound <- 2*enrollment.period.upper.bound
#}
while(enrollment.period.upper.bound-enrollment.period.lower.bound>0.01){
candidate.enrollment.period <- mean(c(enrollment.period.lower.bound,enrollment.period.upper.bound))
osea.design.performance.evaluation <- triage.based.on.outcome.type(outcome.type='survival',
enrollment.period=candidate.enrollment.period,
n.arms=n.arms,
accrual.rate=ui.accrual.yearly.rate,
subpopulation.sizes=ui.subpopulation.sizes,
non.inferiority=ifelse(ui.time.to.event.trial.type=="non-inferiority",TRUE,FALSE),
hazard.rate=ui.hazard.rate,
time=max(ui.max.duration,candidate.enrollment.period),
max.follow=Inf,
censoring.rate=ui.time.to.event.censoring.rate,
ni.margin=ui.time.to.event.non.inferiority.trial.margin,
restrict.enrollment=FALSE,
mcid=ui.mcid,
futility.boundaries=NULL,
relative.efficiency=ui.relative.efficiency,
n.simulations=simulated.annealing.parameter.n.simulations,
alpha.allocation=
rep(1/number.of.alpha.allocation.components,
number.of.alpha.allocation.components),
total.alpha=ui.total.alpha,
construct.joint.distribution.of.test.statistics=construct.joint.distribution.of.test.statistics,
generate.efficacy.boundaries=generate.efficacy.boundaries,
design.evaluate=design.evaluate)
discrepancy.between.desired.power.empirical.power <- max(ui.desired.power-cbind(osea.design.performance.evaluation$empirical.power,osea.design.performance.evaluation$conj.power),na.rm=TRUE)
feasibility.indicator <- ifelse(is.na(discrepancy.between.desired.power.empirical.power),TRUE,
discrepancy.between.desired.power.empirical.power<=0)
if(feasibility.indicator){#Current sample size is feasible; store current results and explore smaller sample sizes
#osea.result <- osea.design.performance.evaluation;
feasible.enrollment.period <- candidate.enrollment.period;
feasible.max.duration <- max(ui.max.duration,feasible.enrollment.period)
enrollment.period.upper.bound <- candidate.enrollment.period} else{
#Current sample size is infeasible; explore larger sample sizes
enrollment.period.lower.bound <- candidate.enrollment.period
}
}
if(is.null(feasible.enrollment.period)){feasible.enrollment.period <- min(ui.max.duration,
ui.max.size/ui.accrual.yearly.rate)} #if no feasible solution, use maximum duration
#Placeholder to force output into format expected by .Rnw file for report building
osea.result <-
sa.optimize(search.parameters=
list(enrollment.period=feasible.enrollment.period),
search.transforms=
list(enrollment.period=function(x){feasible.enrollment.period}),
fixed.parameters=list(n.arms=n.arms,
accrual.rate=ui.accrual.yearly.rate,
subpopulation.sizes=ui.subpopulation.sizes,
outcome.type='survival',
non.inferiority=ifelse(ui.time.to.event.trial.type=="non-inferiority",TRUE,FALSE),
hazard.rate=ui.hazard.rate,
time=max(feasible.enrollment.period,ui.max.duration),
max.follow=Inf,
censoring.rate=ui.time.to.event.censoring.rate,
ni.margin=ui.time.to.event.non.inferiority.trial.margin,
restrict.enrollment=FALSE,
mcid=ui.mcid,
futility.boundaries=NULL,
relative.efficiency=ui.relative.efficiency,
n.simulations=simulated.annealing.parameter.n.simulations,
alpha.allocation=
rep(1/number.of.alpha.allocation.components,
number.of.alpha.allocation.components),
total.alpha=ui.total.alpha,
construct.joint.distribution.of.test.statistics=construct.joint.distribution.of.test.statistics,
generate.efficacy.boundaries=generate.efficacy.boundaries,
design.evaluate=design.evaluate),
create.object=triage.based.on.outcome.type,
evaluate.object=power.penalized.weighted,
function.scale=simulated.annealing.parameter.function.scale,
parameter.scale=simulated.annealing.parameter.period.scale,
max.iterations=2,
temperature=simulated.annealing.parameter.survival.temperature,
evals.per.temp=simulated.annealing.parameter.evals.per.temp,
report.iteration=simulated.annealing.parameter.report.iteration,
scenario.weights=ui.scenario.weights,
power.penalty=simulated.annealing.parameter.power.penalty,
power.constraints=ui.desired.power,
optimization.target=ui.optimization.target)
}
null.hypotheses
length(null.hypotheses)
View(potential.trials)
View(conj.power.n.subgroups)
rnorm(346)
